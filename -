/*
 * getStyleObject Plugin for jQuery JavaScript Library
 * From: http://upshots.org/?p=112
 */

(function($){
    jQuery.fn.getStyleObject = function(){
        var dom = this.get(0);
        var style;
        var returns = {};
        if(window.getComputedStyle){
            var camelize = function(a,b){
                return b.toUpperCase();
            };
            style = window.getComputedStyle(dom, null);
            for(var i = 0, l = style.length; i < l; i++){
                var prop = style[i];
                var camel = prop.replace(/\-([a-z])/g, camelize);
                var val = style.getPropertyValue(prop);
                returns[camel] = val;
            };
            return returns;
        };
        if(style = dom.currentStyle){
            for(var prop in style){
                returns[prop] = style[prop];
            };
            return returns;
        };
        return this.css();
    }
})(jQuery);

dtable = {};

//acl >= 2 - użytkownik może modyfikować tabelkę
//dtable.init = function(acl, self_url, wiki_url, page_id)

dtable.toolbar_id = "dtable_tool__bar";
//I need it to use dokuwiki toolbar
dtable.textarea_id = "dtable_wiki__text";
//Set it to true if we are waiting fro form to send
dtable.form_processing = false;
//Store informatino about actual clicked row
dtable.row = {};
//Id of processed dtable
dtable.id = "";
//if page locked
dtable.page_locked = 0;

//state of lock
//0 -> we don't know anything
//1 -> someone lock the page and we waiting until we could refresh it 
//2 -> we can edit page for some time but we left browser alone and our lock expires and someone else came end start to edit page, so we need to lock our page and optionally send the form.
dtable.lock_state = 0;

//use to determine if user doing something
dtable.pageX = 0;
dtable.pageY = 0;
dtable.prev_pageX = 0;
dtable.prev_pageY = 0;

//check if forms in dtable are changed
dtable.prev_val = '';

//When my or someones else lock expires
dtable.lock_expires = -1;

//All intervals
dtable.intervals = [];

dtable.lock_seeker_timeout = 5*1000;

dtable.error = function(msg)
{
    alert(msg);
};
dtable.show_form = function($table)
{
    var $form = $table.find(".form_row"); 
    var $toolbar = jQuery("#"+dtable.toolbar_id);

    //backwards contability with 
    /*if($form.closest('form').hasClass("dynamic_form"))
    {
	//there will be code which will handle rowspan in the futhure
    }*/


    //display fix jquery 1.6 bug
    $form.css("display", "table-row");

	var rowspan_text_height = -1;

	$form.find("textarea").each(function() {
		/*var twidth = jQuery(this).width();
		var theight = jQuery(this).height();*/

		var cewidth = parseInt(jQuery(this).closest("td, th").css('width'));
		var ceheight = parseInt(jQuery(this).closest("td, th").css('height'));

		jQuery(this).width(cewidth);
		jQuery(this).height(ceheight);

		var rowspan = jQuery(this).attr("rowspan");
		if (rowspan_text_height === -1 && (typeof rowspan === 'undefined' || rowspan !== false || rowspan == 1))
			rowspan_text_height = jQuery(this).height();
	});

	//calculate texarea.rowspans positions
	var textarea_offset = $form.find("textarea").first().offset();

	$table.find("textarea:not(.form_row textarea)").each(function() {
		var this_texta_offset = jQuery(this).offset();
		jQuery(this).css('top', textarea_offset.top - this_texta_offset.top);
		jQuery(this).width(jQuery(this).closest("td").width());
		jQuery(this).height(rowspan_text_height);
	});

	

    var offset = $form.offset();
    $toolbar.css({
	"left": offset.left, 
	"top": offset.top-$toolbar.height()
    });
    $toolbar.show();
};
dtable.hide_form = function($table)
{
    var $form = $table.find(".form_row"); 
	$form.html('');
	//remove textareas in rowspans
	$table.find("textarea").remove();

    var $toolbar = jQuery("#"+dtable.toolbar_id);
    $form.hide();
    $toolbar.hide();
};
dtable.get_data_rows = function($table)
{
    return $table.find("tr").not(".form_row");//.not(":has(th)");
};
dtable.get_row_id = function($table, $row)
{
    return dtable.get_data_rows($table).index($row);
};
dtable.get_call = function($form)
{
	return $form.find("input[name=call]").val();
};
//Lock actuall page
dtable.lock = function()
{
  jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
  {
      'call': 'dtable_page_lock',
      'page': JSINFO['id'],
  },function() { dtable.page_locked = 1 });
};
dtable.unlock = function()
{
  if(dtable.page_locked == 1)
  {
      jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
      {
	  'call': 'dtable_page_unlock',
	  'page': JSINFO['id'],
      },function() { dtable.page_locked = 0 });
  }
};
dtable.panlock_switch = function(state)
{
    if(state == undefined)
	state = 'hide';


    if(state == 'panlock')
    {
	jQuery(".dtable .panunlock").hide();
	jQuery(".dtable .panlock").show();
    } else if(state == 'panunlock')
    {
	jQuery(".dtable .panlock").hide();
	jQuery(".dtable .panunlock").show();
    } else
    {
	jQuery(".dtable .panlock").hide();
	jQuery(".dtable .panunlock").hide();
    }
};

dtable.lock_seeker = function(nolock, lock)
{
  jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
  {
      'call': 'dtable_is_page_locked',
      'page': JSINFO['id'],
  }, function(data)
     {
	 var res = jQuery.parseJSON(data);

	 dtable.lock_expires = res.time_left;

	 if(res.locked === 1)
	 {
	     if(dtable.lock_state == 2)
      		lock();

	    jQuery(".dtable .panlock .who").text(res.who);
	    dtable.update_lock_timer(dtable.lock_expires);
	    dtable.panlock_switch('panlock');


	    dtable.lock_state = 1;

	 } else
	 {
	    dtable.panlock_switch('hide');
	    if(dtable.lock_state === 0)
		nolock();
	    else if(dtable.lock_state === 1)
	    {
		dtable.panlock_switch('panunlock');
		dtable.clear_all_intervals();
	    }

	    dtable.lock_state = 2;


	    //refresh lock if user do something
	    var form_val_str = '';
	    jQuery('.dtable .form_row').find('textarea, input').each(function() {
		form_val_str += jQuery(this).val();
	    });
	    if(dtable.pageX != dtable.prev_pageX || dtable.pageY != dtable.prev_pageY || dtable.prev_val != form_val_str)
	    {
		dtable.prev_pageX = dtable.pageX;
		dtable.prev_pageY = dtable.pageY;
		dtable.prev_val = form_val_str;
		dtable.lock();
	    }
	 }

     });
};
dtable.update_lock_timer = function(seconds)
{
    var date = new Date();
    date.setSeconds(date.getSeconds()+seconds);
    jQuery(".dtable .panlock .time_left").text(date.toLocaleString());
};
dtable.unlock_dtable = function()
{

    var $row = dtable.get_data_rows(jQuery(".dtable"));
    var $context_menu = jQuery("#dtable_context_menu");

    dtable.lock();

   //track mouse in order to check if user do somenhing
   jQuery(document).bind('mousemove', function(e){
       dtable.pageX = e.pageX;
       dtable.pageY = e.pageY;
   }); 



    $row.find("td, th").bind("contextmenu", dtable.row_mousedown);

    jQuery(document).bind("mouseup", function(e) {
       if (e.which == 1) { $context_menu.hide(); }
    });

	//prevent outer texarea from sending form
    jQuery(".dtable").delegate("textarea", "dblclick", function(e) {
		e.stopPropagation();
    });

    //This was previously at the bottom of init function
    jQuery(".dtable").delegate(".form_row", "dblclick", function(e) {
		e.stopPropagation();
    });

    jQuery("body").delegate("#"+dtable.toolbar_id, "dblclick", function(e) {
		e.stopPropagation();
    });

    jQuery(document).dblclick(function(e){
	    //sent form only once
	    if(dtable.form_processing == false)
	    {
		//$context_menu.hide();
		if(jQuery(".dtable .form_row").find(":visible").length > 0)
		    jQuery(".dtable").submit();
	    }
    });
};
dtable.lock_dtable = function()
{
    var $row = dtable.get_data_rows(jQuery(".dtable"));

    jQuery(document).unbind('mousemove');
    $row.find("td, th").unbind('contextmenu');
    
    jQuery("#dtable_context_menu").hide();
};

dtable.row_mousedown = function(e) {
    var $this_cell = jQuery(this);
    var $this_row = $this_cell.closest("tr");

    var $context_menu = jQuery("#dtable_context_menu");
	
    $context_menu.html('');
	switch(this.nodeName.toLowerCase())
	{
		case 'td':
			//create contextMenu
			var context_menus = ['insert_before', 'insert_after', 'edit', 'remove', 
				'insert_col_left', 'insert_col_right', 'mark_row_as_header', 'mark_col_as_header', 'mark_cell_as_header'];
		break;
		case 'th':
			var context_menus = ['insert_before', 'insert_after', 'edit', 'remove', 
				'insert_col_left', 'insert_col_right', 'mark_row_as_cell', 'mark_col_as_cell', 'mark_cell_as_cell'];
		break;
	}

	var colspan = $this_cell.attr("colspan");
	var rowspan = $this_cell.attr("rowspan");

	/*if ((typeof colspan !== 'undefined' && colspan !== false) || (typeof rowspan !== 'undefined' && rowspan !== false)) {
		context_menus.push('unmerge');
	}*/

	for(item_index in context_menus)
	{
		var item = context_menus[item_index];
		jQuery('<li class="'+item+'">').html('<a href="#'+item+'">'+JSINFO['lang'][item]).appendTo($context_menu);
	}
	$context_menu.find("li.edit").addClass("separator");
	$context_menu.find("li.insert_col_left").addClass("separator");
	$context_menu.find("li.mark_row_as_header").addClass("separator");
	/*if ((typeof colspan !== 'undefined' && colspan !== false) || (typeof rowspan !== 'undefined' && rowspan !== false)) {
		$context_menu.find("li.unmerge").addClass("separator");
	}*/

	
    var offsetX = e.pageX + 1;
    var offsetY = e.pageY + 1;


    $context_menu.show();
    $context_menu.css('top',offsetY);
    $context_menu.css('left',offsetX);

    dtable.row = $this_row;
    e.preventDefault();

};
dtable.clear_all_intervals = function()
{
    for( i in dtable.intervals)
    {
	clearInterval(dtable.intervals[i]);
    }
};

dtable.change_rows = function($table, rowspans)
{
      for( row in rowspans )
      {
	  var rowspan = rowspans[ row ];

	  var $cell = $table.find('tr').eq(parseInt( rowspan.tr ) + 1)
			    .find('td, th').eq( parseInt( rowspan.td) );

	      
	  $cell.attr("rowspan", rowspan.val);


      }
};

dtable.get_table_id = function($form)
{
    var table = $form.attr("id");
    return table.replace(/^dtable_/, '');
};

dtable.new_build_form = function($form, $row, action, value, row_data)
{
    

	if ($form.find("tr.form_row").length > 0)
   	{
		$form_row = $form.find("tr.form_row"); 
		jQuery($form).find("input.dtable_action").attr("name", action).val(value);
		jQuery($form).find("input[name=table]").val(dtable.get_table_id($form));
	} else
   	{
		$form_row = jQuery('<tr class="form_row">').hide().appendTo( $form.find("table") );
		//append dtable_action
		jQuery($form).append('<input type="hidden" class="dtable_action" name="'+action+'" value="'+value+'">');
		//append table name
		jQuery($form).append('<input type="hidden" name="table" value="'+ dtable.get_table_id($form) +'">');
	}


	var rowspans = [];
	var rowspans_keys = [];
	var rows_before = 1;
	//found rowspans mother cells
	jQuery($this_row.prevAll().get().reverse()).each(
		function() {
			jQuery(this).find("td, th").each(function()
				{
					var rowspan = jQuery(this).attr("rowspan");
					if (typeof rowspan !== 'undefined' && rowspan !== false && rowspan >= rows_before+1) {
						var ind = jQuery(this).index();
						rowspans[ind] = jQuery(this);
						rowspans_keys.push(ind);
						rows_before++;
					}
				});
		});
	rowspans_keys.sort();

	var td_index = 0;
	var col = 0;
	var rowsp_cell_ind = 0;


	for(var i = 0; i < row_data.length; i++)
	{
		var tclass = row_data[i][0]; 
		var colspan = parseInt(row_data[i][1]); 
		var content = row_data[i][2]; 


		if (content == ':::')
		{
			var $mother_cell = rowspans[rowspans_keys[rowsp_cell_ind]];
			rowsp_cell_ind++;
			jQuery('<textarea class="'+tclass+' rowspans" name="col' + col +'">').val(content).css({'position': 'relative', 'display': 'block'}).appendTo($mother_cell);
			col++;
		} else if (colspan > 1)
		{
			var $father_cell = $row.find("td, th").eq(td_index);

			var width = $father_cell.width();
			var height = $father_cell.height();

			var $form_cell = jQuery('<td>').attr({'colspan': colspan}).width(width).height(height);

			$form_cell.append('<button class="toolbutton" title="'+JSINFO['lang']['show_merged_rows'].replace("%d", colspan-1)+'">');

			jQuery('<textarea class="'+tclass+'" name="col' + col +'">').val(content).appendTo($form_cell);
			col++;
			for (var j = 1; j < colspan; j++)
			{
				$form_cell.append(jQuery('<textarea class="'+tclass+'" name="col' + col +'">').val('').hide());
				col++;
			}
			td_index++;

			$form_row.append($form_cell);
		} else
		{
			var $father_cell = $row.find("td, th").eq(td_index);

			var width = $father_cell.width();
			var height = $father_cell.height();

			var $form_cell = jQuery('<td>').attr({rowspan: $father_cell.attr('rowspan')}).width(width).height(height);
			$textarea = jQuery('<textarea class="'+tclass+'" name="col' + col +'">').val(content).appendTo($form_cell);

			td_index++;
			col++;

			$form_row.append($form_cell);
		}

	}
	$form.find("textarea").first().attr("id", dtable.textarea_id);

    var $toolbar = jQuery("#"+dtable.toolbar_id);
	initToolbar(dtable.toolbar_id, dtable.textarea_id, toolbar);//??? - ale działa
};
dtable.build_form = function($form, $row, action, value)
{
    

	if ($form.find("tr.form_row").length > 0)
   	{
		$form_row = $form.find("tr.form_row"); 
		$form_row.html('');
		jQuery($form).find("input.dtable_action").attr("name", action).val(value);
		jQuery($form).find("input[name=table]").val(dtable.get_table_id($form));
	} else
   	{
		$form_row = jQuery('<tr class="form_row">').hide().appendTo( $form.find("table") );
		//append dtable_action
		jQuery($form).append('<input type="hidden" class="dtable_action" name="'+action+'" value="'+value+'">');
		//append table name
		jQuery($form).append('<input type="hidden" name="table" value="'+ dtable.get_table_id($form) +'">');
	}

	//If I won't do it, initToolbar will not work.
	//dtable.textarea_obj = jQuery("textarea").hide().appendTo("body").attr("id", dtable.textarea_id);


	var i = 0;
    $row.find("td, th").each(function() {
		var $form_cell = jQuery('<td>').attr({colspan: jQuery(this).attr('colspan'), rowspan: jQuery(this).attr('rowspan')});
		$form_cell.html('<textarea class="tablecell_open" name="col' + i +'">');
		i++;
		var colspan = jQuery(this).attr("colspan");
		if (typeof colspan !== 'undefined' && colspan !== false) {
			for (var j = 1; j < parseInt(colspan); j++)
			{
				$form_cell.append('<input type="hidden" name="col' + i +'" value="">');
				i++;
			}
		}
		$form_row.append($form_cell);
    });

	$form.find("textarea").first().attr("id", dtable.textarea_id);

    var $toolbar = jQuery("#"+dtable.toolbar_id);
	initToolbar(dtable.toolbar_id, dtable.textarea_id, toolbar);//??? - ale działa
};

dtable.contex_handler = function(e) {
    e.preventDefault();

    $this_row = dtable.row;
    dtable.id = $this_row.closest(".dtable").attr("id");

    var row_id = $this_row.attr("id");
    var $table = $this_row.closest("table");
    var $form = $this_row.closest("form");


    var table = dtable.get_table_id($form);

    //hide current form
    var ev = jQuery(this).attr("href");

    switch(ev)
    {
	case '#remove':
	  jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
	  {
	      'call': dtable.get_call($form),
	      'table': table,
	      'remove': dtable.get_row_id($table, $this_row)
	  },
	  function(data)
	  {
	      var res = jQuery.parseJSON(data);
	      if(res.type == 'success')
	      {
		  $this_row.remove();
		  if($table.find("tr").length <= 2 )
		  {
		    dtable.show_form($table);  
		  }
	      } else if(res.type == 'alternate_success')
	      {
		  $this_row.remove();

		  //change rows in case of rowspan
		  dtable.change_rows($table, res.rowspans);


		  if($table.find("tr").length <= 2 )
		  {
		    dtable.show_form($table);  
		  }
	      } else
	      {
		  dtable.error(res.msg);
	      }
	  });
	break;
	case '#edit':



	      jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
	      {
		  'call': dtable.get_call($form),
		  'table': table,
		  'get': dtable.get_row_id($table, $this_row)
	      },
	      function(data)
	      {
		  var res = jQuery.parseJSON(data);

		  var rows = res;

		  
		  dtable.new_build_form($form, $this_row, "edit", dtable.get_row_id($table, $this_row), rows);
		  $this_row.after($table.find(".form_row"));


		  //var $form_elm = jQuery("#"+dtable.id+" .form td").find("input, textarea");
		  /*var $form_elm = $table.find(".form_row").find("input, textarea");
		  var i = 0;
		  for(elm in rows)
		  {
		      $form_elm.eq(i).attr("class", rows[elm][0]).val(rows[elm][2]);
		      i++;
		  }*/
		  $this_row.hide();
		  dtable.show_form($table);  
	      });
		

		//$edit_link = jQuery("#dtable_context_menu a");

		
		//$edit_link.unbind('click');
		//$edit_link.click( 

		var old_row = $this_row;
		//jQuery("#dtable_context_menu").undelegate("a", "click");
		jQuery("#dtable_context_menu").delegate("a", "click", 
			function(e)
			{
			    dtable.hide_form($table);  

			    /*$table.find(".form_row").find("input, textarea").val('');
			    $form.find(".dtable_action").attr("name", "add").attr("value", "-1");*/

			    old_row.show();
			    dtable.contex_handler(e);
			});
	break;
	case '#insert_after':

		dtable.build_form($form, $this_row, "add", dtable.get_row_id($table, $this_row));

		var $form_row = $table.find(".form_row");

		$this_row.after($form_row);
		dtable.show_form($table);  
	break;
	case '#insert_before':

		var $form_row = $table.find(".form_row");

		var $before_elm = $this_row.prev();
		var add = -1;
		if($before_elm.length != 0)
		    add = dtable.get_row_id($table, $before_elm);

		dtable.build_form($form, $this_row, "add", add);

		$this_row.before($table.find(".form_row"));
		dtable.show_form($table);  
	break;
    }
    jQuery(this).closest("#dtable_context_menu").hide();
};

dtable.init = function()
{
//create panlock elm
jQuery('<div class="panlock notify">').html(JSINFO['lang']['lock_notify']).hide().prependTo(".dtable");

//create panunlock elm
jQuery('<div class="panunlock notify">').html(JSINFO['lang']['unlock_notify']).hide().prependTo(".dtable");

//create form
/*jQuery(".dtable.dynamic_form").each(function()
{
	dtable.build_form(jQuery(this), jQuery(this).find("tr:first"));
});*/

//update lock expires
dtable.intervals.push(setInterval(function()
{
    dtable.lock_expires -= 1;
    if(dtable.lock_expires <= -1)
	return;
    
    if(dtable.lock_expires === 0)
    {
	//we had own lock
	if(dtable.page_locked == 1)
	{
	    //clear all intervals
	    dtable.clear_all_intervals();

	    //page is locked
	    dtable.page_locked = 0;

	    var $forms = jQuery('.dtable .form_row:visible').closest('form');
	    $forms.submit();

	    //after submitting form
	    dtable.lock_dtable();
	    dtable.panlock_switch('panunlock');
	} else 
	{
	    //unblock us if someones lock expires
	    dtable.lock_seeker();
	}
    }
    dtable.update_lock_timer(dtable.lock_expires);
}, 1000));


$toolbar = jQuery("body").append('<div id="'+dtable.toolbar_id+'" style="position:absolute;display:none;z-index:999"></div>');

jQuery.ui.dialog.prototype._oldcreate = jQuery.ui.dialog.prototype._create;
jQuery.extend(jQuery.ui.dialog.prototype, {
    _init: function( )
    {
	//This must be done to have correct z-index bahaviour in monobook template
	var lin_wiz = jQuery("#link__wiz");
	lin_wiz.appendTo("body");
	 this._oldcreate();
    }
});

//This is the place where was old init Toolbar code


//create empty context menu - it will be filled with context before displaying
var $context_menu = jQuery('<ul id="dtable_context_menu">').prependTo("body");


$context_menu.delegate("a", "click", dtable.contex_handler);


var $row = dtable.get_data_rows(jQuery(".dtable"));



dtable.lock_seeker(dtable.unlock_dtable, dtable.lock_dtable);

dtable.intervals.push(setInterval(function() {
    dtable.lock_seeker(dtable.unlock_dtable, dtable.lock_dtable);
}, dtable.lock_seeker_timeout));


//Add is set on id of element after we want to add new element if set to -1 we adding element at the top of the table
jQuery(".dtable").submit(
	function()
	{
	    var $form = jQuery(this);
	    if($form.attr("id") == dtable.id)
	    {
		dtable.form_processing = true;
		var data = {};
		jQuery(this).find("input, textarea").each(
		    function()
		    {
				if (jQuery(this).attr("class") != null && jQuery(this).attr("name").indexOf("col") == 0)
					data[jQuery(this).attr("name")] = JSON.stringify([jQuery(this).attr("class"), jQuery(this).val()]);
				else
					data[jQuery(this).attr("name")] = jQuery(this).val();
		    });
		jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', 
			    data,
		function(data)
		{
		      var res = jQuery.parseJSON(data);
		      //left for comtability with dtableremote
		      if(res.type == 'success')
		      {
			  
			  $new_elm = jQuery('<tr>');
			  $form.find(".form_row").after($new_elm);

			  for(f in res.fileds)
			  {
			      $new_elm.append("<td>"+res.fileds[f]+"</td>");
			  }

			  if(dtable.page_locked == 1)
			      $new_elm.find("td, th").bind("contextmenu", dtable.row_mousedown);

			  //remove old element
			  $form.find("tr:hidden").remove();

			  dtable.hide_form($form);
			  $form.find(".form_row input, textarea").val('');

			//$edit_link = jQuery("#dtable_context_menu a");
			
			//$edit_link.die();
			//$edit_link.live('click', dtable.contex_handler);

		      } else if(res.type == 'alternate_success')
		      {
			  if( res.new_row !== undefined )
			  {
			      $new_elm = jQuery('<tr>');
			      $new_elm.html( res.new_row );

			      $form.find(".form_row").after($new_elm);
			      if(dtable.page_locked == 1)
				  $new_elm.find("td, th").bind("contextmenu", dtable.row_mousedown);
			  }

			  //remove old element
			  $form.find("tr:hidden").remove();
			  dtable.hide_form($form);
			  $form.find(".form_row input, textarea").val('');
			  
			  var $table = $form.find("table");
			  dtable.change_rows($table, res.rowspans);

		      } else
		      {
			  dtable.error(res.msg);
		      }
		      //$form.find(".dtable_action").attr("name", "add").attr("value", "-1");
		      dtable.form_processing = false;
	       });
	    }
	   return false;
	});
jQuery(".dtable").delegate('textarea', 'focus', function(e) {

    dtable.id = jQuery(this).closest(".dtable").attr("id");

    //If I won't do it, initToolbar will not work.
    //jQuery("#dtable_form textarea:first-child").attr("id", "");
    //jQuery(this).attr("id", dtable.textarea_id);
    
    if(jQuery(this).attr("id") != dtable.textarea_id)
    {
	$marked_textarea = jQuery("#"+dtable.textarea_id);

	$marked_parent = $marked_textarea.parent();
	$this_parent = jQuery(this).parent();
	
	this_val = jQuery(this).val();
	marked_val = $marked_textarea.val();
	jQuery(this).val(marked_val);
	$marked_textarea.val(this_val);

	this_name = jQuery(this).attr("name");
	marked_name = $marked_textarea.attr("name");
	jQuery(this).attr("name", marked_name);
	$marked_textarea.attr("name", this_name);

	this_width = jQuery(this).width();
	marked_width = $marked_textarea.width();

	this_height = jQuery(this).height();
	marked_height = $marked_textarea.height();
	
	//get styles
	var this_style = jQuery(this).getStyleObject();
	var marked_style = $marked_textarea.getStyleObject();
	jQuery(this).css(marked_style);
	$marked_textarea.css(this_style);
	

	//correct width and height
	jQuery(this).width(marked_width);
	$marked_textarea.width(this_width);

	jQuery(this).height(marked_height);
	$marked_textarea.height(this_height);
	

	$marked_parent.append(jQuery(this));
	$this_parent.append($marked_textarea);

	$marked_textarea.show();

	jQuery("#"+dtable.textarea_id).focus();

	//$marked_textarea = jQuery(this);
    }

});



};

jQuery(document).ready(function()
{
    //check permission and if any dtable exists
    if(JSINFO['write'] === true && jQuery(".dtable").length > 0)
	dtable.init()
});
jQuery(window).unload( function () { dtable.unlock(); } );
